# DataLemur
1.

Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.

Write a query to list the candidates who possess all of the required skills for the job. Sort the output by candidate ID in ascending order.

Assumption:

There are no duplicates in the candidates table.
candidates Table:
Column Name	Type
candidate_id	integer
skill	varchar
candidates Example Input:
candidate_id	skill
123	Python
123	Tableau
123	PostgreSQL
234	R
234	PowerBI
234	SQL Server
345	Python
345	Tableau
Example Output:
candidate_id
123
Explanation
Candidate 123 is displayed because they have Python, Tableau, and PostgreSQL skills. 345 isn't included in the output because they're missing one of the required skills: PostgreSQL.

The dataset you are querying against may have different input & output - this is just an example!

p.s. give the hints below a try if you're stuck and don't know where to start!

p.p.s if you find this problem too tricky, even after the hints, check out my 30-day SQL learning roadmap, which features my favorite free resources to learn SQL! After you strengthen your SQL foundations, I'm sure you'll be more than ready to tackle this question!

(Sourced from Linkedin)

WITH mycte AS 
(
SELECT candidate_id, COUNT(*) AS number
FROM candidates
WHERE skill IN ('Python', 'Tableau', 'PostgreSQL')
GROUP BY candidate_id
HAVING COUNT(*) = 3
)

SELECT candidate_id
FROM mycte

2.

Assume you're given two tables containing data about Facebook Pages and their respective likes (as in "Like a Facebook Page").

Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.

pages Table:
Column Name	Type
page_id	integer
page_name	varchar
pages Example Input:
page_id	page_name
20001	SQL Solutions
20045	Brain Exercises
20701	Tips for Data Analysts
page_likes Table:
Column Name	Type
user_id	integer
page_id	integer
liked_date	datetime
page_likes Example Input:
user_id	page_id	liked_date
111	20001	04/08/2022 00:00:00
121	20045	03/12/2022 00:00:00
156	20001	07/25/2022 00:00:00
Example Output:
page_id
20701
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Facebook)

SELECT P.page_id
FROM pages AS P
LEFT JOIN page_likes AS PL
ON P.page_id = PL.page_id
WHERE PL.page_id IS NULL

3.

Tesla is investigating production bottlenecks and they need your help to extract the relevant data. Write a query to determine which parts have begun the assembly process but are not yet finished.

Assumptions:

parts_assembly table contains all parts currently in production, each at varying stages of the assembly process.
An unfinished part is one that lacks a finish_date.
This question is straightforward, so let's approach it with simplicity in both thinking and solution.

Effective April 11th 2023, the problem statement and assumptions were updated to enhance clarity.

parts_assembly Table
Column Name	Type
part	string
finish_date	datetime
assembly_step	integer
parts_assembly Example Input
part	finish_date	assembly_step
battery	01/22/2022 00:00:00	1
battery	02/22/2022 00:00:00	2
battery	03/22/2022 00:00:00	3
bumper	01/22/2022 00:00:00	1
bumper	02/22/2022 00:00:00	2
bumper		3
bumper		4
Example Output
part	assembly_step
bumper	3
bumper	4
Explanation
The bumpers in step 3 and 4 are the only item that remains unfinished as it lacks a recorded finish date.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Tesla)

SELECT part, assembly_step
FROM parts_assembly
WHERE finish_date IS NULL

4.

Assume you're given the table on user viewership categorised by device type where the three types are laptop, tablet, and phone.

Write a query that calculates the total viewership for laptops and mobile devices where mobile is defined as the sum of tablet and phone viewership. Output the total viewership for laptops as laptop_reviews and the total viewership for mobile devices as mobile_views.

Effective 15 April 2023, the solution has been updated with a more concise and easy-to-understand approach.

viewership Table
Column Name	Type
user_id	integer
device_type	string ('laptop', 'tablet', 'phone')
view_time	timestamp
viewership Example Input
user_id	device_type	view_time
123	tablet	01/02/2022 00:00:00
125	laptop	01/07/2022 00:00:00
128	laptop	02/09/2022 00:00:00
129	phone	02/09/2022 00:00:00
145	tablet	02/24/2022 00:00:00
Example Output
laptop_views	mobile_views
2	3
Explanation
Based on the example input, there are a total of 2 laptop views and 3 mobile views.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from New York Times)

SELECT SUM(CASE WHEN device_type = 'laptop' THEN 1 ELSE 0 END) AS laptop_views,
       SUM(CASE WHEN device_type IN ('tablet', 'phone') THEN 1 ELSE 0 END) AS mobile_views
FROM viewership

5.

Given a table of Facebook posts, for each user who posted at least twice in 2021, write a query to find the number of days between each user’s first post of the year and last post of the year in the year 2021. Output the user and number of the days between each user's first and last post.

p.s. If you've read the Ace the Data Science Interview and liked it, consider writing us a review?

posts Table:
Column Name	Type
user_id	integer
post_id	integer
post_content	text
post_date	timestamp
posts Example Input:
user_id	post_id	post_content	post_date
151652	599415	Need a hug	07/10/2021 12:00:00
661093	624356	Bed. Class 8-12. Work 12-3. Gym 3-5 or 6. Then class 6-10. Another day that's gonna fly by. I miss my girlfriend	07/29/2021 13:00:00
004239	784254	Happy 4th of July!	07/04/2021 11:00:00
661093	442560	Just going to cry myself to sleep after watching Marley and Me.	07/08/2021 14:00:00
151652	111766	I'm so done with covid - need travelling ASAP!	07/12/2021 19:00:00
Example Output:
user_id	days_between
151652	2
661093	21
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Facebook)

SELECT user_id, EXTRACT(DAY FROM MAX(post_date) - MIN(post_date)) AS days_between
FROM posts
WHERE EXTRACT(YEAR FROM post_date) = 2021
GROUP BY user_id
HAVING COUNT(*) >= 2;

6.

Write a query to identify the top 2 Power Users who sent the highest number of messages on Microsoft Teams in August 2022. Display the IDs of these 2 users along with the total number of messages they sent. Output the results in descending order based on the count of the messages.

Assumption:

No two users have sent the same number of messages in August 2022.
messages Table:
Column Name	Type
message_id	integer
sender_id	integer
receiver_id	integer
content	varchar
sent_date	datetime
messages Example Input:
message_id	sender_id	receiver_id	content	sent_date
901	3601	4500	You up?	08/03/2022 00:00:00
902	4500	3601	Only if you're buying	08/03/2022 00:00:00
743	3601	8752	Let's take this offline	06/14/2022 00:00:00
922	3601	4500	Get on the call	08/10/2022 00:00:00
Example Output:
sender_id	message_count
3601	2
4500	1
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Microsoft)

SELECT sender_id,
       COUNT(*) AS message_count
FROM messages
WHERE EXTRACT(MONTH FROM sent_date) = '8'
  AND EXTRACT(YEAR FROM sent_date) = '2022'
GROUP BY sender_id
ORDER BY message_count DESC
LIMIT 2

7.

Assume you're given a table containing job postings from various companies on the LinkedIn platform. Write a query to retrieve the count of companies that have posted duplicate job listings.

Definition:

Duplicate job listings are defined as two job listings within the same company that share identical titles and descriptions.
job_listings Table:
Column Name	Type
job_id	integer
company_id	integer
title	string
description	string
job_listings Example Input:
job_id	company_id	title	description
248	827	Business Analyst	Business analyst evaluates past and current business data with the primary goal of improving decision-making processes within organizations.
149	845	Business Analyst	Business analyst evaluates past and current business data with the primary goal of improving decision-making processes within organizations.
945	345	Data Analyst	Data analyst reviews data to identify key insights into a business's customers and ways the data can be used to solve problems.
164	345	Data Analyst	Data analyst reviews data to identify key insights into a business's customers and ways the data can be used to solve problems.
172	244	Data Engineer	Data engineer works in a variety of settings to build systems that collect, manage, and convert raw data into usable information for data scientists and business analysts to interpret.
Example Output:
duplicate_companies
1
Explanation:
There is one company ID 345 that posted duplicate job listings. The duplicate listings, IDs 945 and 164 have identical titles and descriptions.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Linkedin)

WITH cte AS
(
SELECT company_id, LOWER(title), LOWER(description)
FROM job_listings
GROUP BY 1, LOWER(title), LOWER(description)
HAVING COUNT(DISTINCT job_id) > 1
)

SELECT COUNT(DISTINCT company_id) AS duplicate_companies
FROM cte

8.

Assume you're given the tables containing completed trade orders and user details in a Robinhood trading system.

Write a query to retrieve the top three cities that have the highest number of completed trade orders listed in descending order. Output the city name and the corresponding number of completed trade orders.

trades Table:
Column Name	Type
order_id	integer
user_id	integer
quantity	integer
status	string ('Completed', 'Cancelled')
date	timestamp
price	decimal (5, 2)
trades Example Input:
order_id	user_id	quantity	status	date	price
100101	111	10	Cancelled	08/17/2022 12:00:00	9.80
100102	111	10	Completed	08/17/2022 12:00:00	10.00
100259	148	35	Completed	08/25/2022 12:00:00	5.10
100264	148	40	Completed	08/26/2022 12:00:00	4.80
100305	300	15	Completed	09/05/2022 12:00:00	10.00
100400	178	32	Completed	09/17/2022 12:00:00	12.00
100565	265	2	Completed	09/27/2022 12:00:00	8.70
users Table:
Column Name	Type
user_id	integer
city	string
email	string
signup_date	datetime
users Example Input:
user_id	city	email	signup_date
111	San Francisco	rrok10@gmail.com	08/03/2021 12:00:00
148	Boston	sailor9820@gmail.com	08/20/2021 12:00:00
178	San Francisco	harrypotterfan182@gmail.com	01/05/2022 12:00:00
265	Denver	shadower_@hotmail.com	02/26/2022 12:00:00
300	San Francisco	houstoncowboy1122@hotmail.com	06/30/2022 12:00:00
Example Output:
city	total_orders
San Francisco	3
Boston	2
Denver	1
In the given dataset, San Francisco has the highest number of completed trade orders with 3 orders. Boston holds the second position with 2 orders, and Denver ranks third with 1 order.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Robinhood)

SELECT u.city, COUNT(t.status) AS total_orders
FROM trades AS t
JOIN users AS u
ON t.user_id = u.user_id
WHERE t.status LIKE 'Completed'
GROUP BY 1
ORDER BY total_orders DESC
LIMIT 3

9.

Given the reviews table, write a query to retrieve the average star rating for each product, grouped by month. The output should display the month as a numerical value, product ID, and average star rating rounded to two decimal places. Sort the output first by month and then by product ID.

P.S. If you've read the Ace the Data Science Interview, and liked it, consider writing us a review?

reviews Table:
Column Name	Type
review_id	integer
user_id	integer
submit_date	datetime
product_id	integer
stars	integer (1-5)
reviews Example Input:
review_id	user_id	submit_date	product_id	stars
6171	123	06/08/2022 00:00:00	50001	4
7802	265	06/10/2022 00:00:00	69852	4
5293	362	06/18/2022 00:00:00	50001	3
6352	192	07/26/2022 00:00:00	69852	3
4517	981	07/05/2022 00:00:00	69852	2
Example Output:
mth	product	avg_stars
6	50001	3.50
6	69852	4.00
7	69852	2.50
Explanation
Product 50001 received two ratings of 4 and 3 in the month of June (6th month), resulting in an average star rating of 3.5.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Amazon)

SELECT EXTRACT(month FROM submit_date) AS mth,	
       product_id AS product, 
       ROUND(AVG(stars), 2) AS avg_stars
FROM reviews
GROUP BY 1, 2
ORDER BY mth, product ASC

10.

Companies often perform salary analyses to ensure fair compensation practices. One useful analysis is to check if there are any employees earning more than their direct managers.

As a HR Analyst, you're asked to identify all employees who earn more than their direct managers. The result should include the employee's ID and name.

employee Schema:
column_name	type	description
employee_id	integer	The unique ID of the employee.
name	string	The name of the employee.
salary	integer	The salary of the employee.
department_id	integer	The department ID of the employee.
manager_id	integer	The manager ID of the employee.
employee Example Input:
employee_id	name	salary	department_id	manager_id
1	Emma Thompson	3800	1	6
2	Daniel Rodriguez	2230	1	7
3	Olivia Smith	7000	1	8
4	Noah Johnson	6800	2	9
5	Sophia Martinez	1750	1	11
6	Liam Brown	13000	3	NULL
7	Ava Garcia	12500	3	NULL
8	William Davis	6800	2	NULL
Example Output:
employee_id	employee_name
3	Olivia Smith
The output shows that Olivia Smith earns $7,000, surpassing her manager, William David who earns $6,800.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from FAANG)

SELECT emp.employee_id AS employee_id,
       emp.name AS employee_name
FROM employee AS mgr
INNER JOIN employee AS emp
ON mgr.employee_id = emp.manager_id
WHERE emp.salary > mgr.salary;

11.

Assume you have an events table on Facebook app analytics. Write a query to calculate the click-through rate (CTR) for the app in 2022 and round the results to 2 decimal places.

Definition and note:

Percentage of click-through rate (CTR) = 100.0 * Number of clicks / Number of impressions
To avoid integer division, multiply the CTR by 100.0, not 100.
events Table:
Column Name	Type
app_id	integer
event_type	string
timestamp	datetime
events Example Input:
app_id	event_type	timestamp
123	impression	07/18/2022 11:36:12
123	impression	07/18/2022 11:37:12
123	click	07/18/2022 11:37:42
234	impression	07/18/2022 14:15:12
234	click	07/18/2022 14:16:12
Example Output:
app_id	ctr
123	50.00
234	100.00
Explanation
Let's consider an example of App 123. This app has a click-through rate (CTR) of 50.00% because out of the 2 impressions it received, it got 1 click.

To calculate the CTR, we divide the number of clicks by the number of impressions, and then multiply the result by 100.0 to express it as a percentage. In this case, 1 divided by 2 equals 0.5, and when multiplied by 100.0, it becomes 50.00%. So, the CTR of App 123 is 50.00%.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Facebook)

SELECT app_id, 
       ROUND(100.0 * 
             SUM(CASE WHEN event_type = 'click' THEN 1 ELSE 0 END)/
             SUM(CASE WHEN event_type = 'impression' THEN 1 ELSE 0 END), 2)
FROM events
WHERE timestamp >= '2022-01-01'
  AND timestamp < '2023-01-01'
GROUP BY 1

12.

Assume you're given tables with information about TikTok user sign-ups and confirmations through email and text. New users on TikTok sign up using their email addresses, and upon sign-up, each user receives a text message confirmation to activate their account.

Write a query to display the user IDs of those who did not confirm their sign-up on the first day, but confirmed on the second day.

Definition:

action_date refers to the date when users activated their accounts and confirmed their sign-up through text messages.
emails Table:
Column Name	Type
email_id	integer
user_id	integer
signup_date	datetime
emails Example Input:
email_id	user_id	signup_date
125	7771	06/14/2022 00:00:00
433	1052	07/09/2022 00:00:00
texts Table:
Column Name	Type
text_id	integer
email_id	integer
signup_action	string ('Confirmed', 'Not confirmed')
action_date	datetime
texts Example Input:
text_id	email_id	signup_action	action_date
6878	125	Confirmed	06/14/2022 00:00:00
6997	433	Not Confirmed	07/09/2022 00:00:00
7000	433	Confirmed	07/10/2022 00:00:00
Example Output:
user_id
1052
Explanation:
Only User 1052 confirmed their sign-up on the second day.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from TikTok)

SELECT e.user_id
FROM emails AS e
INNER JOIN texts AS t
ON e.email_id = t.email_id
WHERE  t.action_date = e.signup_date + INTERVAL '1 day'
   AND t.signup_action LIKE 'Confirmed'
GROUP BY e.user_id

13.

IBM is analyzing how their employees are utilizing the Db2 database by tracking the SQL queries executed by their employees. The objective is to generate data to populate a histogram that shows the number of unique queries run by employees during the third quarter of 2023 (July to September). Additionally, it should count the number of employees who did not run any queries during this period.

Display the number of unique queries as histogram categories, along with the count of employees who executed that number of unique queries.

queries Schema:
Column Name	Type	Description
employee_id	integer	The ID of the employee who executed the query.
query_id	integer	The unique identifier for each query (Primary Key).
query_starttime	datetime	The timestamp when the query started.
execution_time	integer	The duration of the query execution in seconds.
queries Example Input:
Assume that the table below displays all queries made from July 1, 2023 to 31 July, 2023:

employee_id	query_id	query_starttime	execution_time
226	856987	07/01/2023 01:04:43	2698
132	286115	07/01/2023 03:25:12	2705
221	33683	07/01/2023 04:34:38	91
240	17745	07/01/2023 14:33:47	2093
110	413477	07/02/2023 10:55:14	470
employees Schema:
Assume that the table below displays all employees in the table:

Column Name	Type	Description
employee_id	integer	The ID of the employee who executed the query.
full_name	string	The full name of the employee.
gender	string	The gender of the employee.
employees Example Input:
employee_id	full_name	gender
1	Judas Beardon	Male
2	Lainey Franciotti	Female
3	Ashbey Strahan	Male
Example Output:
unique_queries	employee_count
0	191
1	46
2	12
3	1
The output indicates that 191 employees did not run any queries, 46 employees ran exactly 1 unique queries, 12 employees ran 2 unique queries, and so on.

(Sourced from IBM)

WITH employee_queries AS (
  SELECT 
    e.employee_id,
    COALESCE(COUNT(DISTINCT q.query_id), 0) AS unique_queries
  FROM employees AS e
  LEFT JOIN queries AS q
    ON e.employee_id = q.employee_id
      AND q.query_starttime >= '2023-07-01T00:00:00Z'
      AND q.query_starttime < '2023-10-01T00:00:00Z'
  GROUP BY e.employee_id
)

SELECT
  unique_queries,
  COUNT(employee_id) AS employee_count
FROM employee_queries
GROUP BY unique_queries
ORDER BY unique_queries;

14.

Your team at JPMorgan Chase is preparing to launch a new credit card, and to gain some insights, you're analyzing how many credit cards were issued each month.

Write a query that outputs the name of each credit card and the difference in the number of issued cards between the month with the highest issuance cards and the lowest issuance. Arrange the results based on the largest disparity.

monthly_cards_issued Table:
Column Name	Type
card_name	string
issued_amount	integer
issue_month	integer
issue_year	integer
monthly_cards_issued Example Input:
card_name	issued_amount	issue_month	issue_year
Chase Freedom Flex	55000	1	2021
Chase Freedom Flex	60000	2	2021
Chase Freedom Flex	65000	3	2021
Chase Freedom Flex	70000	4	2021
Chase Sapphire Reserve	170000	1	2021
Chase Sapphire Reserve	175000	2	2021
Chase Sapphire Reserve	180000	3	2021
Example Output:
card_name	difference
Chase Freedom Flex	15000
Chase Sapphire Reserve	10000
Chase Freedom Flex's best month was 70k cards issued and the worst month was 55k cards, so the difference is 15k cards.

Chase Sapphire Reserve’s best month was 180k cards issued and the worst month was 170k cards, so the difference is 10k cards.

(Sourced from JP Morgan)

SELECT card_name,
       MAX(issued_amount) - MIN(issued_amount) AS difference
FROM monthly_cards_issued
GROUP BY card_name
ORDER BY difference DESC

15.

You're trying to find the mean number of items per order on Alibaba, rounded to 1 decimal place using tables which includes information on the count of items in each order (item_count table) and the corresponding number of orders for each item count (order_occurrences table).

items_per_order Table:
Column Name	Type
item_count	integer
order_occurrences	integer
items_per_order Example Input:
item_count	order_occurrences
1	500
2	1000
3	800
4	1000
There are a total of 500 orders with one item per order, 1000 orders with two items per order, and 800 orders with three items per order."

Example Output:
mean
2.7
Explanation
Let's calculate the arithmetic average:

Total items = (1*500) + (2*1000) + (3*800) + (4*1000) = 8900

Total orders = 500 + 1000 + 800 + 1000 = 3300

Mean = 8900 / 3300 = 2.7

(Sourced from Alibaba)

SELECT ROUND(
  CAST(SUM(item_count * order_occurrences) AS NUMERIC) / 
  CAST(SUM(order_occurrences) AS NUMERIC), 
  1
) AS mean
FROM items_per_order

16.

CVS Health is trying to better understand its pharmacy sales, and how well different products are selling. Each drug can only be produced by one manufacturer.

Write a query to find the top 3 most profitable drugs sold, and how much profit they made. Assume that there are no ties in the profits. Display the result from the highest to the lowest total profit.

Definition:

cogs stands for Cost of Goods Sold which is the direct cost associated with producing the drug.
Total Profit = Total Sales - Cost of Goods Sold
If you like this question, try out Pharmacy Analytics (Part 2)!

pharmacy_sales Table:
Column Name	Type
product_id	integer
units_sold	integer
total_sales	decimal
cogs	decimal
manufacturer	varchar
drug	varchar
pharmacy_sales Example Input:
product_id	units_sold	total_sales	cogs	manufacturer	drug
9	37410	293452.54	208876.01	Eli Lilly	Zyprexa
34	94698	600997.19	521182.16	AstraZeneca	Surmontil
61	77023	500101.61	419174.97	Biogen	Varicose Relief
136	144814	1084258	1006447.73	Biogen	Burkhart
Example Output:
drug	total_profit
Zyprexa	84576.53
Varicose Relief	80926.64
Surmontil	79815.03
Explanation:
Zyprexa made the most profit (of $84,576.53) followed by Varicose Relief (of $80,926.64) and Surmontil (of $79,815.3).

(Sourced from CVS Health)

SELECT drug,
       (total_sales - cogs) AS total_profit
FROM pharmacy_sales
GROUP BY 1, 2
ORDER BY total_profit DESC
LIMIT 3

17.

CVS Health is analyzing its pharmacy sales data, and how well different products are selling in the market. Each drug is exclusively manufactured by a single manufacturer.

Write a query to identify the manufacturers associated with the drugs that resulted in losses for CVS Health and calculate the total amount of losses incurred.

Output the manufacturer's name, the number of drugs associated with losses, and the total losses in absolute value. Display the results sorted in descending order with the highest losses displayed at the top.

If you like this question, try out Pharmacy Analytics (Part 3)!

pharmacy_sales Table:
Column Name	Type
product_id	integer
units_sold	integer
total_sales	decimal
cogs	decimal
manufacturer	varchar
drug	varchar
pharmacy_sales Example Input:
product_id	units_sold	total_sales	cogs	manufacturer	drug
156	89514	3130097.00	3427421.73	Biogen	Acyclovir
25	222331	2753546.00	2974975.36	AbbVie	Lamivudine and Zidovudine
50	90484	2521023.73	2742445.90	Eli Lilly	Dermasorb TA Complete Kit
98	110746	813188.82	140422.87	Biogen	Medi-Chord
Example Output:
manufacturer	drug_count	total_loss
Biogen	1	297324.73
AbbVie	1	221429.36
Eli Lilly	1	221422.17
Explanation:
The first three rows indicate that some drugs resulted in losses. Among these, Biogen had the highest losses, followed by AbbVie and Eli Lilly. However, the Medi-Chord drug manufactured by Biogen reported a profit and was excluded from the result.

(Sourced from CVS Health)

SELECT manufacturer,
       COUNT(*) AS drug_count,
       SUM(cogs - total_sales) AS total_loss
FROM pharmacy_sales
WHERE cogs > total_sales
GROUP BY 1
ORDER BY total_loss DESC

18.

CVS Health wants to gain a clearer understanding of its pharmacy sales and the performance of various products.

Write a query to calculate the total drug sales for each manufacturer. Round the answer to the nearest million and report your results in descending order of total sales. In case of any duplicates, sort them alphabetically by the manufacturer name.

Since this data will be displayed on a dashboard viewed by business stakeholders, please format your results as follows: "$36 million".

If you like this question, try out Pharmacy Analytics (Part 4)!

pharmacy_sales Table:
Column Name	Type
product_id	integer
units_sold	integer
total_sales	decimal
cogs	decimal
manufacturer	varchar
drug	varchar
pharmacy_sales Example Input:
product_id	units_sold	total_sales	cogs	manufacturer	drug
94	132362	2041758.41	1373721.70	Biogen	UP and UP
9	37410	293452.54	208876.01	Eli Lilly	Zyprexa
50	90484	2521023.73	2742445.9	Eli Lilly	Dermasorb
61	77023	500101.61	419174.97	Biogen	Varicose Relief
136	144814	1084258.00	1006447.73	Biogen	Burkhart
Example Output:
manufacturer	sale
Biogen	$4 million
Eli Lilly	$3 million
Explanation
The total sales for Biogen is $4 million ($2,041,758.41 + $500,101.61 + $1,084,258.00 = $3,626,118.02) and for Eli Lilly is $3 million ($293,452.54 + $2,521,023.73 = $2,814,476.27).

(Sourced from CVS Pharmacy)

SELECT manufacturer,
       CONCAT('$', ROUND(SUM(total_sales) / 1000000), ' million') AS sale
FROM pharmacy_sales
GROUP BY 1
ORDER BY SUM(total_sales) DESC, manufacturer

19.

UnitedHealth Group (UHG) has a program called Advocate4Me, which allows policy holders (or, members) to call an advocate and receive support for their health care needs – whether that's claims and benefits support, drug coverage, pre- and post-authorisation, medical records, emergency assistance, or member portal services.

Write a query to find how many UHG policy holders made three, or more calls, assuming each call is identified by the case_id column.

If you like this question, try out Patient Support Analysis (Part 2)!

callers Table:
Column Name	Type
policy_holder_id	integer
case_id	varchar
call_category	varchar
call_date	timestamp
call_duration_secs	integer
callers Example Input:
policy_holder_id	case_id	call_category	call_date	call_duration_secs
1	f1d012f9-9d02-4966-a968-bf6c5bc9a9fe	emergency assistance	2023-04-13T19:16:53Z	144
1	41ce8fb6-1ddd-4f50-ac31-07bfcce6aaab	authorisation	2023-05-25T09:09:30Z	815
2	9b1af84b-eedb-4c21-9730-6f099cc2cc5e	claims assistance	2023-01-26T01:21:27Z	992
2	8471a3d4-6fc7-4bb2-9fc7-4583e3638a9e	emergency assistance	2023-03-09T10:58:54Z	128
2	38208fae-bad0-49bf-99aa-7842ba2e37bc	benefits	2023-06-05T07:35:43Z	619
Example Output:
policy_holder_count
1
Explanation:
The only caller who made three, or more calls is policy holder ID 2.

(Sourced from Unitedhealth)

SELECT COUNT(*) AS policy_holder_count
FROM
(
SELECT policy_holder_id,
       COUNT(case_id) AS call_count
FROM callers
GROUP BY policy_holder_id
HAVING COUNT(case_id) >= 3
) AS call_records

20.

Assume you're given a table Twitter tweet data, write a query to obtain a histogram of tweets posted per user in 2022. Output the tweet count per user as the bucket and the number of Twitter users who fall into that bucket.

In other words, group the users by the number of tweets they posted in 2022 and count the number of users in each group.

tweets Table:
Column Name	Type
tweet_id	integer
user_id	integer
msg	string
tweet_date	timestamp
tweets Example Input:
tweet_id	user_id	msg	tweet_date
214252	111	Am considering taking Tesla private at $420. Funding secured.	12/30/2021 00:00:00
739252	111	Despite the constant negative press covfefe	01/01/2022 00:00:00
846402	111	Following @NickSinghTech on Twitter changed my life!	02/14/2022 00:00:00
241425	254	If the salary is so competitive why won’t you tell me what it is?	03/01/2022 00:00:00
231574	148	I no longer have a manager. I can't be managed	03/23/2022 00:00:00
Example Output:
tweet_bucket	users_num
1	2
2	1
Explanation:
Based on the example output, there are two users who posted only one tweet in 2022, and one user who posted two tweets in 2022. The query groups the users by the number of tweets they posted and displays the number of users in each group.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Twitter)

WITH tweet_counts AS
(
    SELECT
        COUNT(tweet_id) AS tweet_count
    FROM
        tweets
    WHERE
        DATE_PART('year', tweet_date) = 2022
    GROUP BY
        user_id
)

SELECT
    COUNT(tweet_count) AS tweet_bucket,
    tweet_count AS user_num
FROM
    tweet_counts
GROUP BY
    tweet_count
ORDER BY
    tweet_bucket ASC;

#StrataScratch
1. 
Write a query that returns the number of unique users per client per month.

Table: fact_events

Company: Apple, Dell, Microsoft

SELECT client_id, 
       MONTH(time_id) AS month, 
       COUNT(DISTINCT user_id) AS users_num
FROM fact_events
GROUP BY 1, 2

2.
Write a query that will calculate the number of shipments per month. The unique key for one shipment is a combination of shipment_id and sub_id. Output the year_month in format YYYY-MM and the number of shipments in that month.

Table: amazon_shipment

Company: Amazon

SELECT COUNT(shipment_id),
       DATE_FORMAT(shipment_date, '%Y-%m') AS date_ym
FROM amazon_shipment
GROUP BY 2

3.
You have been asked to find the 5 most lucrative products in terms of total revenue for the first half of 2022 (from January to June inclusive).

Output their IDs and the total revenue.

Table: online_orders

Company: Meta

SELECT product_id,
       SUM(cost_in_dollars * units_sold) AS revenue
FROM online_orders
WHERE date_sold BETWEEN '2022-01-01' AND '2022-06-30'
GROUP BY product_id
ORDER BY revenue DESC
LIMIT 5

4.
Find the number of employees working in the Admin department that joined in April or later.

Table: worker

Company: Microsoft, Amazon

SELECT COUNT(*) AS n_admits
FROM worker
WHERE department = 'Admin'
  AND MONTH(joining_date) >= 04

5.
Find the average number of bathrooms and bedrooms for each city’s property types. Output the result along with the city name and the property type.

Table: airbnb_search_details

Company: Airbnb

SELECT city, 
       property_type,
       AVG(bathrooms) AS n_bathrooms_avg,
       AVG(bedrooms) AS n_bedrooms_avg
FROM airbnb_search_details
GROUP BY 1, 2

6.
Count the number of user events performed by MacBookPro users.
Output the result along with the event name.
Sort the result based on the event count in the descending order.

Table: playbook_events

Company: Apple

SELECT event_name, COUNT(user_id) AS event_count
FROM playbook_events
WHERE device = 'macbook pro'
GROUP BY 1
ORDER BY event_count DESC

7.
Find the most profitable company from the financial sector. Output the result along with the continent.

Table: forbes_global_2010_2014

Company: Forbes

SELECT company, continent
FROM forbes_global_2010_2014
WHERE sector = 'Financials'
GROUP BY 1
HAVING MAX(profits)
LIMIT 1

8.
Find the inspection date and risk category (pe_description) of facilities named 'STREET CHURROS' that received a score below 95.

Table: los_angeles_restaurant_health_inspections

Company: City of Los Angeles

SELECT activity_date, pe_description
FROM los_angeles_restaurant_health_inspections
WHERE facility_name = 'STREET CHURROS'
  AND score < 95

9.
You are given a dataset of health inspections that includes details about violations. Each row represents an inspection, and if an inspection resulted in a violation, the violation_id column will contain a value.

Count the total number of violations that occurred at 'Roxanne Cafe' for each year, based on the inspection date. Output the year and the corresponding number of violations in ascending order of the year.

Table: sf_restaurant_health_violations

Company: City of San Francisco

SELECT YEAR(inspection_date) AS inspection_year, 
       COUNT(violation_id) AS n_violations
FROM sf_restaurant_health_violations
WHERE business_name = 'Roxanne Cafe'
GROUP BY 1
ORDER BY inspection_year ASC

10.
Find the number of workers by department who joined on or after April 1, 2014.

Output the department name along with the corresponding number of workers.

Sort the results based on the number of workers in descending order.

Table: Worker

Company: Amazon

SELECT department, COUNT(worker_id) AS num_workers
FROM worker
WHERE joining_date >= '2014-04-01'
GROUP BY 1
ORDER BY num_workers DESC

11.
List all hotels along with their total number of reviews using the total_number_of_reviews column. Sort the results by total reviews in descending order.

Table: hotel_reviews

Company: Airbnb, Expedia, Amadeus

SELECT hotel_name, total_number_of_reviews
FROM hotel_reviews
GROUP BY 1
ORDER BY total_number_of_reviews DESC

12.
Find the details of each customer regardless of whether the customer made an order. Output the customer's first name, last name, and the city along with the order details.
Sort records based on the customer's first name and the order details in ascending order.

Table: customers, orders

Company: Apple, Amazon

SELECT c.first_name,
       c.last_name,
       c.city,
       o.order_details
FROM customers c
LEFT JOIN orders o ON o.cust_id = c.id
ORDER BY c.first_name ASC,
         o.order_details ASC;

13.
Find order details made by Jill and Eva.
Consider the Jill and Eva as first names of customers.
Output the order date, details and cost along with the first name.
Order records based on the customer id in ascending order.

Table: customers, orders

Company: Shopify, Amazon

SELECT c.first_name,
       o.order_date,
       o.order_details,
       o.total_order_cost
FROM customers c
INNER JOIN orders o
ON c.id = o.cust_id
WHERE c.first_name = 'Jill'
   OR c.first_name = 'Eva'

14.
Compare each employee's salary with the average salary of the corresponding department.
Output the department, first name, and salary of employees along with the average salary of that department.

Table: employee

Company: Glassdoor, Salesforce

WITH mycte AS (
SELECT department, AVG(salary) AS avg_salary
FROM employee
GROUP BY department
)

SELECT e.department, 
       e.first_name,
       e.salary,
       m.avg_salary
FROM employee AS e
LEFT JOIN mycte AS m
ON e.department = m.department
ORDER BY e.department ASC

15.
Find libraries from the 2016 circulation year that have no email address provided but have their notice preference set to email. In your solution, output their home library code.

Table: library_usage

Company: City of San Francisco

SELECT home_library_code
FROM library_usage
WHERE circulation_active_year >= 2016
  AND provided_email_address = 0
  AND notice_preference_definition = 'email'
GROUP BY 1

16.
Find the base pay for Police Captains.
Output the employee name along with the corresponding base pay.

Table: sf_public_salaries

Company: City of San Francisco

SELECT employeename, basepay
FROM sf_public_salaries
WHERE jobtitle LIKE '%POLICE%'

17.
Find songs that have ranked in the top position. Output the track name and the number of times it ranked at the top. Sort your records by the number of times the song was in the top position in descending order.

Table: spotify_worldwide_daily_song_ranking

Company: Spotify

SELECT trackname,
       COUNT(*) AS times_top1
FROM spotify_worldwide_daily_song_ranking
WHERE position = 1
GROUP BY trackname
ORDER BY times_top1 DESC

18.
Find how many times each artist appeared on the Spotify ranking list.
Output the artist name along with the corresponding number of occurrences.
Order records by the number of occurrences in descending order.

Table: spotify_worldwide_daily_song_ranking

Company: Spotify

SELECT artist,
       COUNT(artist) AS n_occurences
FROM spotify_worldwide_daily_song_ranking
GROUP BY 1
ORDER BY n_occurences DESC

19.
Find all Lyft drivers who earn either equal to or less than 30k USD or equal to or more than 70k USD.
Output all details related to retrieved records.

Table: lyft_drivers

Company: Lyft

SELECT *
FROM lyft_drivers
WHERE yearly_salary <= 30000
   OR yearly_salary > 70000

20.
Meta/Facebook has developed a new programing language called Hack.To measure the popularity of Hack they ran a survey with their employees. The survey included data on previous programing familiarity as well as the number of years of experience, age, gender and most importantly satisfaction with Hack. Due to an error location data was not collected, but your supervisor demands a report showing average popularity of Hack by office location. Luckily the user IDs of employees completing the surveys were stored.
Based on the above, find the average popularity of the Hack per office location.
Output the location along with the average popularity.

Table: facebook_employees, facebook_hack_survey

Company: Meta

SELECT fe.location, AVG(fhs.popularity)
FROM facebook_employees AS fe
INNER JOIN facebook_hack_survey AS fhs
ON fe.id = fhs.employee_id
GROUP BY 1

21.
Find all posts which were reacted to with a heart. For such posts output all columns from facebook_posts table.

Table: facebook_reactions, facebook_posts

Company: Meta

SELECT fp.post_id,
       fp.poster,
       fp.post_text,
       fp.post_keywords,
       fp.post_date
FROM facebook_reactions AS fr
INNER JOIN facebook_posts AS fp
ON fr.post_id = fp.post_id
WHERE fr.reaction = 'heart'
GROUP BY 1

22.
Count the number of movies for which Abigail Breslin was nominated for an Oscar.

Table: oscar_nominees

Company: Google, Netflix

SELECT COUNT(*) AS n_movies_by_abi
FROM oscar_nominees
WHERE nominee = 'Abigail Breslin'

23.
Find how many reviews exist for each review score given to 'Hotel Arena'. Output the hotel name ('Hotel Arena'), each review score, and the number of reviews for that score. Ensure the results only include 'Hotel Arena.'

Table: hotel_reviews

Company: Expedia, Airbnb

SELECT hotel_name,
       reviewer_score,
       COUNT(reviewer_score) AS count
FROM hotel_reviews
WHERE hotel_name = 'Hotel Arena'
GROUP BY 2

24.
Find the last time each bike was in use. Output both the bike number and the date-timestamp of the bike's last use (i.e., the date-time the bike was returned). Order the results by bikes that were most recently used.

Table: dc_bikeshare_q1_2012

Company: DoorDash, Lyft

SELECT bike_number,
       MAX(end_time) AS last_used
FROM dc_bikeshare_q1_2012
GROUP BY bike_number
ORDER BY last_used DESC

25.
We have a table with employees and their salaries, however, some of the records are old and contain outdated salary information. Find the current salary of each employee assuming that salaries increase each year. Output their id, first name, last name, department ID, and current salary. Order your list by employee ID in ascending order.

Table: ms_employee_salary

Company: Microsoft

SELECT id, 
       first_name,
       last_name,
       department_id,
       MAX(salary) AS salary
FROM ms_employee_salary
GROUP BY 1

26. 
Calculates the difference between the highest salaries in the marketing and engineering departments. Output just the absolute difference in salaries.

Table: db_employee, db_dept

Company: Linkedin, Dropbox

SELECT ABS(MAX(CASE WHEN dbd.department = 'engineering' THEN dbe.salary END) - 
          MAX(CASE WHEN dbd.department = 'marketing' THEN dbe.salary END)) 
      AS salary_difference
FROM db_employee AS dbe
INNER JOIN db_dept AS dbd
ON dbe.department_id = dbd.id

27. 
Find the job titles of the employees with the highest salary. If multiple employees have the same highest salary, include the job titles for all such employees.

Table: worker, title

Company: Amazon, DoorDash

WITH mycte AS 
(SELECT t.worker_title, MAX(w.salary) AS best_paid_title
FROM worker AS w
INNER JOIN title AS t
ON w.worker_id = t.worker_ref_id
GROUP BY 1
ORDER BY best_paid_title DESC)

SELECT worker_title AS best_paid_title
FROM mycte
LIMIT 2

# Datalemur Continued ...
21.

Assume you are given the table below on Uber transactions made by users. Write a query to obtain the third transaction of every user. Output the user id, spend and transaction date.

transactions Table:
Column Name	Type
user_id	integer
spend	decimal
transaction_date	timestamp
transactions Example Input:
user_id	spend	transaction_date
111	100.50	01/08/2022 12:00:00
111	55.00	01/10/2022 12:00:00
121	36.00	01/18/2022 12:00:00
145	24.99	01/26/2022 12:00:00
111	89.60	02/05/2022 12:00:00
Example Output:
user_id	spend	transaction_date
111	89.60	02/05/2022 12:00:00

(Sourced from: Uber)

WITH mycte AS 
(SELECT *, 
       RANK() OVER(PARTITION BY user_id 
                   ORDER BY transaction_date ASC) AS ranking
FROM transactions)

SELECT user_id,
       spend,
       transaction_date
FROM mycte
WHERE ranking = 3

22.

Imagine you're an HR analyst at a tech company tasked with analyzing employee salaries. Your manager is keen on understanding the pay distribution and asks you to determine the second highest salary among all employees.

It's possible that multiple employees may share the same second highest salary. In case of duplicate, display the salary only once.

employee Schema:
column_name	type	description
employee_id	integer	The unique ID of the employee.
name	string	The name of the employee.
salary	integer	The salary of the employee.
department_id	integer	The department ID of the employee.
manager_id	integer	The manager ID of the employee.
employee Example Input:
employee_id	name	salary	department_id	manager_id
1	Emma Thompson	3800	1	6
2	Daniel Rodriguez	2230	1	7
3	Olivia Smith	2000	1	8
Example Output:
second_highest_salary
2230
The output represents the second highest salary among all employees. In this case, the second highest salary is $2,230.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced by FAANG)

WITH mycte AS 
(SELECT *, 
        DENSE_RANK() OVER(PARTITION BY department_id ORDER BY salary DESC) AS denseranking
FROM employee)

SELECT DISTINCT(salary) AS second_highest_salary
FROM mycte
WHERE denseranking = 2
ORDER BY second_highest_salary DESC
LIMIT 1

# Stratascratch continued ...
28.
Write a query that returns the number of unique users per client per month.

Table: fact_events

Company: Apple, Dell, Microsoft

SELECT client_id,
       EXTRACT(month from time_id) as month,
       count(DISTINCT user_id) as users_num
FROM fact_events
GROUP BY client_id,
          EXTRACT(month from time_id)

29.
Write a query that will calculate the number of shipments per month. The unique key for one shipment is a combination of shipment_id and sub_id. Output the year_month in format YYYY-MM and the number of shipments in that month.

Table: amazon_shipment

Company: Amazon

SELECT TO_CHAR(shipment_date, 'YYYY-MM') AS year_month,
       COUNT(DISTINCT (shipment_id, sub_id))
FROM amazon_shipment
GROUP BY 1

30.
You have been asked to find the 5 most lucrative products in terms of total revenue for the first half of 2022 (from January to June inclusive).

Output their IDs and the total revenue.

Table: online_orders

Company: Meta

WITH cte AS
  (SELECT product_id,
          SUM(cost_in_dollars * units_sold) AS revenue,
          RANK() OVER (
                       ORDER BY SUM(cost_in_dollars * units_sold) DESC) AS rnk
   FROM online_orders
   WHERE EXTRACT(MONTH
                 FROM date_sold) BETWEEN 1 AND 6
   GROUP BY product_id)
SELECT product_id,
       revenue
FROM cte
WHERE rnk <= 5;

31.
Find the average number of bathrooms and bedrooms for each city’s property types. Output the result along with the city name and the property type.

Table: airbnb_search_details

Company: Airbnb

SELECT city,
       property_type,
       AVG(bathrooms) AS n_bathrooms_avg,
       AVG(bedrooms) AS n_bedrooms_avg
FROM airbnb_search_details
GROUP BY city,
         property_type

32.
Count the number of user events performed by MacBookPro users.
Output the result along with the event name.
Sort the result based on the event count in the descending order.

Table: playbook_events

Company: Apple

SELECT event_name,
       COUNT(*) AS event_count
FROM playbook_events
WHERE device = 'macbook pro'
GROUP BY event_name
ORDER BY event_count DESC

# Datalemur continued ...

23.
Assume you're given tables with information on Snapchat users, including their ages and time spent sending and opening snaps.

Write a query to obtain a breakdown of the time spent sending vs. opening snaps as a percentage of total time spent on these activities grouped by age group. Round the percentage to 2 decimal places in the output.

Notes:

Calculate the following percentages:
time spent sending / (Time spent sending + Time spent opening)
Time spent opening / (Time spent sending + Time spent opening)
To avoid integer division in percentages, multiply by 100.0 and not 100.
Effective April 15th, 2023, the solution has been updated and optimised.

activities Table
Column Name	Type
activity_id	integer
user_id	integer
activity_type	string ('send', 'open', 'chat')
time_spent	float
activity_date	datetime
activities Example Input
activity_id	user_id	activity_type	time_spent	activity_date
7274	123	open	4.50	06/22/2022 12:00:00
2425	123	send	3.50	06/22/2022 12:00:00
1413	456	send	5.67	06/23/2022 12:00:00
1414	789	chat	11.00	06/25/2022 12:00:00
2536	456	open	3.00	06/25/2022 12:00:00
age_breakdown Table
Column Name	Type
user_id	integer
age_bucket	string ('21-25', '26-30', '31-25')
age_breakdown Example Input
user_id	age_bucket
123	31-35
456	26-30
789	21-25
Example Output
age_bucket	send_perc	open_perc
26-30	65.40	34.60
31-35	43.75	56.25
Explanation
Using the age bucket 26-30 as example, the time spent sending snaps was 5.67 and the time spent opening snaps was 3.

To calculate the percentage of time spent sending snaps, we divide the time spent sending snaps by the total time spent on sending and opening snaps, which is 5.67 + 3 = 8.67.

So, the percentage of time spent sending snaps is 5.67 / (5.67 + 3) = 65.4%, and the percentage of time spent opening snaps is 3 / (5.67 + 3) = 34.6%.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Snapchat)

SELECT ab.age_bucket,
       ROUND(SUM(CASE WHEN a.activity_type = 'send' THEN a.time_spent ELSE 0 END) * 100.0 /
             SUM(CASE WHEN a.activity_type IN ('open', 'send') THEN a.time_spent ELSE 0 END), 
             2) AS send_perc,
       ROUND(SUM(CASE WHEN a.activity_type = 'open' THEN a.time_spent ELSE 0 END) * 100.0 /
             SUM(CASE WHEN a.activity_type IN ('open', 'send') THEN a.time_spent ELSE 0 END),
             2) AS open_prec
FROM activities AS a
INNER JOIN age_breakdown AS ab
ON a.user_id = ab.user_id
WHERE a.activity_type IN ('send', 'open')
GROUP BY ab.age_bucket;

24.
Given a table of tweet data over a specified time period, calculate the 3-day rolling average of tweets for each user. Output the user ID, tweet date, and rolling averages rounded to 2 decimal places.

Notes:

A rolling average, also known as a moving average or running mean is a time-series technique that examines trends in data over a specified period of time.
In this case, we want to determine how the tweet count for each user changes over a 3-day period.
Effective April 7th, 2023, the problem statement, solution and hints for this question have been revised.

tweets Table:
Column Name	Type
user_id	integer
tweet_date	timestamp
tweet_count	integer
tweets Example Input:
user_id	tweet_date	tweet_count
111	06/01/2022 00:00:00	2
111	06/02/2022 00:00:00	1
111	06/03/2022 00:00:00	3
111	06/04/2022 00:00:00	4
111	06/05/2022 00:00:00	5
Example Output:
user_id	tweet_date	rolling_avg_3d
111	06/01/2022 00:00:00	2.00
111	06/02/2022 00:00:00	1.50
111	06/03/2022 00:00:00	2.00
111	06/04/2022 00:00:00	2.67
111	06/05/2022 00:00:00	4.00
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Twitter)

SELECT user_id, 
       tweet_date,
       ROUND(AVG(tweet_count) OVER(PARTITION BY user_id ORDER BY tweet_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) AS rolling_avg_3rd
FROM tweets

25.
Assume you're given a table containing data on Amazon customers and their spending on products in different category, write a query to identify the top two highest-grossing products within each category in the year 2022. The output should include the category, product, and total spend.

product_spend Table:
Column Name	Type
category	string
product	string
user_id	integer
spend	decimal
transaction_date	timestamp
product_spend Example Input:
category	product	user_id	spend	transaction_date
appliance	refrigerator	165	246.00	12/26/2021 12:00:00
appliance	refrigerator	123	299.99	03/02/2022 12:00:00
appliance	washing machine	123	219.80	03/02/2022 12:00:00
electronics	vacuum	178	152.00	04/05/2022 12:00:00
electronics	wireless headset	156	249.90	07/08/2022 12:00:00
electronics	vacuum	145	189.00	07/15/2022 12:00:00
Example Output:
category	product	total_spend
appliance	refrigerator	299.99
appliance	washing machine	219.80
electronics	vacuum	341.00
electronics	wireless headset	249.90
Explanation:
Within the "appliance" category, the top two highest-grossing products are "refrigerator" and "washing machine."

In the "electronics" category, the top two highest-grossing products are "vacuum" and "wireless headset."

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Amazon)

WITH mycte AS 
(
SELECT category, 
       product,
       SUM(spend) AS total_spend,
       RANK() OVER(PARTITION BY category ORDER BY SUM(spend) DESC) AS ranking
FROM product_spend
WHERE EXTRACT(YEAR FROM transaction_date) = 2022
GROUP BY 1, 2
ORDER BY total_spend DESC
)

SELECT category,
       product,
       total_spend
FROM mycte
WHERE ranking <= 2
ORDER BY category ASC

26.
As part of an ongoing analysis of salary distribution within the company, your manager has requested a report identifying high earners in each department. A 'high earner' within a department is defined as an employee with a salary ranking among the top three salaries within that department.

You're tasked with identifying these high earners across all departments. Write a query to display the employee's name along with their department name and salary. In case of duplicates, sort the results of department name in ascending order, then by salary in descending order. If multiple employees have the same salary, then order them alphabetically.

Note: Ensure to utilize the appropriate ranking window function to handle duplicate salaries effectively.

As of June 18th, we have removed the requirement for unique salaries and revised the sorting order for the results.

employee Schema:
column_name	type	description
employee_id	integer	The unique ID of the employee.
name	string	The name of the employee.
salary	integer	The salary of the employee.
department_id	integer	The department ID of the employee.
manager_id	integer	The manager ID of the employee.
employee Example Input:
employee_id	name	salary	department_id	manager_id
1	Emma Thompson	3800	1	6
2	Daniel Rodriguez	2230	1	7
3	Olivia Smith	2000	1	8
4	Noah Johnson	6800	2	9
5	Sophia Martinez	1750	1	11
6	Liam Brown	13000	3	
7	Ava Garcia	12500	3	
8	William Davis	6800	2	
9	Isabella Wilson	11000	3	
10	James Anderson	4000	1	11
department Schema:
column_name	type	description
department_id	integer	The department ID of the employee.
department_name	string	The name of the department.
department Example Input:
department_id	department_name
1	Data Analytics
2	Data Science
Example Output:
department_name	name	salary
Data Analytics	James Anderson	4000
Data Analytics	Emma Thompson	3800
Data Analytics	Daniel Rodriguez	2230
Data Science	Noah Johnson	6800
Data Science	William Davis	6800
The output displays the high earners in each department.

In the Data Analytics deaprtment, James Anderson leads with a salary of $4,000, followed by Emma Thompson earning $3,800, and Daniel Rodriguez with $2,230.
In the Data Science department, both Noah Johnson and William Davis earn $6,800, with Noah listed before William due to alphabetical ordering.
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from FAANG)

WITH mycte AS
(
SELECT d.department_name,
       e.name,
       e.salary,
       e.department_id,
       DENSE_RANK() OVER(PARTITION BY d.department_name ORDER BY e.salary DESC) AS ranking
FROM employee AS e
LEFT JOIN department AS d
ON e.department_id = d.department_id
ORDER BY department_name ASC, salary DESC, name ASC
)

SELECT department_name,
       name,
       salary
FROM mycte
WHERE ranking <= 3

27.
New TikTok users sign up with their emails. They confirmed their signup by replying to the text confirmation to activate their accounts. Users may receive multiple text messages for account confirmation until they have confirmed their new account.

A senior analyst is interested to know the activation rate of specified users in the emails table. Write a query to find the activation rate. Round the percentage to 2 decimal places.

Definitions:

emails table contain the information of user signup details.
texts table contains the users' activation information.
Assumptions:

The analyst is interested in the activation rate of specific users in the emails table, which may not include all users that could potentially be found in the texts table.
For example, user 123 in the emails table may not be in the texts table and vice versa.
Effective April 4th 2023, we added an assumption to the question to provide additional clarity.

emails Table:
Column Name	Type
email_id	integer
user_id	integer
signup_date	datetime
emails Example Input:
email_id	user_id	signup_date
125	7771	06/14/2022 00:00:00
236	6950	07/01/2022 00:00:00
433	1052	07/09/2022 00:00:00
texts Table:
Column Name	Type
text_id	integer
email_id	integer
signup_action	varchar
texts Example Input:
text_id	email_id	signup_action
6878	125	Confirmed
6920	236	Not Confirmed
6994	236	Confirmed
'Confirmed' in signup_action means the user has activated their account and successfully completed the signup process.

Example Output:
confirm_rate
0.67
Explanation:
67% of users have successfully completed their signup and activated their accounts. The remaining 33% have not yet replied to the text to confirm their signup.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from TikTok)

WITH mycte AS 
(
SELECT user_id,
       CASE WHEN texts.email_id IS NOT NULL THEN 1 ELSE 0 END AS activation_count
FROM emails
LEFT JOIN texts
ON emails.email_id = texts.email_id
AND signup_action = 'Confirmed'
)

SELECT ROUND(SUM(activation_count)::DECIMAL / COUNT(user_id), 2) AS activation_rate
FROM mycte;

28.
A Microsoft Azure Supercloud customer is defined as a customer who has purchased at least one product from every product category listed in the products table.

Write a query that identifies the customer IDs of these Supercloud customers.

customer_contracts Table:
Column Name	Type
customer_id	integer
product_id	integer
amount	integer
customer_contracts Example Input:
customer_id	product_id	amount
1	1	1000
1	3	2000
1	5	1500
2	2	3000
2	6	2000
products Table:
Column Name	Type
product_id	integer
product_category	string
product_name	string
products Example Input:
product_id	product_category	product_name
1	Analytics	Azure Databricks
2	Analytics	Azure Stream Analytics
4	Containers	Azure Kubernetes Service
5	Containers	Azure Service Fabric
6	Compute	Virtual Machines
7	Compute	Azure Functions
Example Output:
customer_id
1
Explanation:
Customer 1 bought from Analytics, Containers, and Compute categories of Azure, and thus is a Supercloud customer. Customer 2 isn't a Supercloud customer, since they don't buy any container services from Azure.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Microsoft)

WITH temp1 AS
(
SELECT cc.customer_id,
      COUNT(DISTINCT p.product_category) AS product_count
FROM customer_contracts AS cc
INNER JOIN products AS p
ON cc.product_id = p.product_id
GROUP BY 1
),
temp2 AS
(
SELECT COUNT(DISTINCT product_category) AS cnt
FROM products
)

SELECT customer_id
FROM temp1
WHERE product_count = (SELECT cnt
                       FROM temp2)

29.
Assume you're given a table with measurement values obtained from a Google sensor over multiple days with measurements taken multiple times within each day.

Write a query to calculate the sum of odd-numbered and even-numbered measurements separately for a particular day and display the results in two different columns. Refer to the Example Output below for the desired format.

Definition:

Within a day, measurements taken at 1st, 3rd, and 5th times are considered odd-numbered measurements, and measurements taken at 2nd, 4th, and 6th times are considered even-numbered measurements.
Effective April 15th, 2023, the question and solution for this question have been revised.

measurements Table:
Column Name	Type
measurement_id	integer
measurement_value	decimal
measurement_time	datetime
measurements Example Input:
measurement_id	measurement_value	measurement_time
131233	1109.51	07/10/2022 09:00:00
135211	1662.74	07/10/2022 11:00:00
523542	1246.24	07/10/2022 13:15:00
143562	1124.50	07/11/2022 15:00:00
346462	1234.14	07/11/2022 16:45:00
Example Output:
measurement_day	odd_sum	even_sum
07/10/2022 00:00:00	2355.75	1662.74
07/11/2022 00:00:00	1124.50	1234.14
Explanation
Based on the results,

On 07/10/2022, the sum of the odd-numbered measurements is 2355.75, while the sum of the even-numbered measurements is 1662.74.
On 07/11/2022, there are only two measurements available. The sum of the odd-numbered measurements is 1124.50, and the sum of the even-numbered measurements is 1234.14.
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Google)

WITH mycte AS
(
SELECT *,
      ROW_NUMBER() OVER(PARTITION BY DATE(measurement_time) ORDER BY measurement_time ASC) AS row_no
FROM measurements
)

SELECT DATE(measurement_time) AS measurement_day,
      SUM(CASE WHEN row_no % 2 <> 0 THEN measurement_value ELSE 0 END) AS odd_sum,
      SUM(CASE WHEN row_no % 2 = 0 THEN measurement_value ELSE 0 END) AS even_sum
FROM mycte
GROUP BY DATE(measurement_time)
ORDER BY DATE(measurement_time) ASC

30.
The Bloomberg terminal is the go-to resource for financial professionals, offering convenient access to a wide array of financial datasets. As a Data Analyst at Bloomberg, you have access to historical data on stock performance.

Currently, you're analyzing the highest and lowest open prices for each FAANG stock by month over the years.

For each FAANG stock, display the ticker symbol, the month and year ('Mon-YYYY') with the corresponding highest and lowest open prices (refer to the Example Output format). Ensure that the results are sorted by ticker symbol.

stock_prices Schema:
Column Name	Type	Description
date	datetime	The specified date (mm/dd/yyyy) of the stock data.
ticker	varchar	The stock ticker symbol (e.g., AAPL) for the corresponding company.
open	decimal	The opening price of the stock at the start of the trading day.
high	decimal	The highest price reached by the stock during the trading day.
low	decimal	The lowest price reached by the stock during the trading day.
close	decimal	The closing price of the stock at the end of the trading day.
stock_prices Example Input:
Note that the table below displays randomly selected AAPL data.

date	ticker	open	high	low	close
01/31/2023 00:00:00	AAPL	142.28	142.70	144.34	144.29
02/28/2023 00:00:00	AAPL	146.83	147.05	149.08	147.41
03/31/2023 00:00:00	AAPL	161.91	162.44	165.00	164.90
04/30/2023 00:00:00	AAPL	167.88	168.49	169.85	169.68
05/31/2023 00:00:00	AAPL	176.76	177.33	179.35	177.25
Example Output:
ticker	highest_mth	highest_open	lowest_mth	lowest_open
AAPL	May-2023	176.76	Jan-2023	142.28
Apple Inc. (AAPL) achieved its highest opening price of $176.76 in May 2023 and its lowest opening price of $142.28 in January 2023.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Bloomberg)

WITH extremes AS (
  SELECT
    ticker,
    MAX(open) AS highest_open,
    MIN(open) AS lowest_open
  FROM
    stock_prices
  WHERE
    ticker IN ('AAPL','AMZN','GOOG','META','MSFT','NFLX')
  GROUP BY
    ticker
)
SELECT
  e.ticker,
  -- format the date of the row where open = highest_open
  TO_CHAR(hp.date, 'Mon-YYYY')   AS highest_mth,
  e.highest_open,
  -- format the date of the row where open = lowest_open
  TO_CHAR(lp.date, 'Mon-YYYY')   AS lowest_mth,
  e.lowest_open
FROM
  extremes AS e
  JOIN stock_prices AS hp
    ON hp.ticker = e.ticker
   AND hp.open   = e.highest_open
  JOIN stock_prices AS lp
    ON lp.ticker = e.ticker
   AND lp.open   = e.lowest_open
ORDER BY
  e.ticker;

31.
In an effort to identify high-value customers, Amazon asked for your help to obtain data about users who go on shopping sprees. A shopping spree occurs when a user makes purchases on 3 or more consecutive days.

List the user IDs who have gone on at least 1 shopping spree in ascending order.

transactions Table:
Column Name	Type
user_id	integer
amount	float
transaction_date	timestamp
transactions Example Input:
user_id	amount	transaction_date
1	9.99	08/01/2022 10:00:00
1	55	08/17/2022 10:00:00
2	149.5	08/05/2022 10:00:00
2	4.89	08/06/2022 10:00:00
2	34	08/07/2022 10:00:00
Example Output:
user_id
2
Explanation
In this example, user_id 2 is the only one who has gone on a shopping spree.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Amazon)

SELECT user_id
FROM (
  SELECT user_id, 
         amount, 
         transaction_date, 
         LAG(transaction_date) OVER(PARTITION BY user_id ORDER BY transaction_date ASC) AS lag_trans_date,
         LEAD(transaction_date) OVER(PARTITION BY user_id ORDER BY transaction_date ASC) AS lead_trans_date
  FROM transactions
) AS LAV
WHERE lag_trans_date IS NOT NULL 
  AND lead_trans_date IS NOT NULL

32.
Assume you're given a table on Walmart user transactions. Based on their most recent transaction date, write a query that retrieve the users along with the number of products they bought.

Output the user's most recent transaction date, user ID, and the number of products, sorted in chronological order by the transaction date.

user_transactions Table:
Column Name	Type
product_id	integer
user_id	integer
spend	decimal
transaction_date	timestamp
user_transactions Example Input:
product_id	user_id	spend	transaction_date
3673	123	68.90	07/08/2022 12:00:00
9623	123	274.10	07/08/2022 12:00:00
1467	115	19.90	07/08/2022 12:00:00
2513	159	25.00	07/08/2022 12:00:00
1452	159	74.50	07/10/2022 12:00:00
Example Output:
transaction_date	user_id	purchase_count
07/08/2022 12:00:00	115	1
07/08/2022 12:00:000	123	2
07/10/2022 12:00:00	159	1
The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Walmart)

WITH mycte AS
(
SELECT *,
       DENSE_RANK() OVER(PARTITION BY user_id ORDER BY transaction_date DESC) AS rnk
FROM user_transactions
)

SELECT transaction_date,
       user_id,
       COUNT(product_id) AS purchase_count
FROM mycte
WHERE rnk = 1
GROUP BY transaction_date, user_id

33.
You're given a table containing the item count for each order on Alibaba, along with the frequency of orders that have the same item count. Write a query to retrieve the mode of the order occurrences. Additionally, if there are multiple item counts with the same mode, the results should be sorted in ascending order.

Clarifications:

item_count: Represents the number of items sold in each order.
order_occurrences: Represents the frequency of orders with the corresponding number of items sold per order.
For example, if there are 800 orders with 3 items sold in each order, the record would have an item_count of 3 and an order_occurrences of 800.
Effective June 14th, 2023, the problem statement has been revised and additional clarification have been added for clarity.

items_per_order Table:
Column Name	Type
item_count	integer
order_occurrences	integer
items_per_order Example Input:
item_count	order_occurrences
1	500
2	1000
3	800
Example Output:
mode
2
Explanation:
Based on the example output, the order_occurrences value of 1000 corresponds to the highest frequency among all item counts. This means that item count of 2 has occurred 1000 times, making it the mode of order occurrences.

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Alibaba Group)

WITH max_occurrence AS (
    SELECT MAX(order_occurrences) AS max_val
    FROM items_per_order
)

SELECT item_count AS mode
FROM items_per_order
WHERE order_occurrences = (SELECT max_val FROM max_occurrence)
ORDER BY item_count;

34.
Your team at JPMorgan Chase is soon launching a new credit card. You are asked to estimate how many cards you'll issue in the first month.

Before you can answer this question, you want to first get some perspective on how well new credit card launches typically do in their first month.

Write a query that outputs the name of the credit card, and how many cards were issued in its launch month. The launch month is the earliest record in the monthly_cards_issued table for a given card. Order the results starting from the biggest issued amount.

monthly_cards_issued Table:
Column Name	Type
issue_month	integer
issue_year	integer
card_name	string
issued_amount	integer
monthly_cards_issued Example Input:
issue_month	issue_year	card_name	issued_amount
1	2021	Chase Sapphire Reserve	170000
2	2021	Chase Sapphire Reserve	175000
3	2021	Chase Sapphire Reserve	180000
3	2021	Chase Freedom Flex	65000
4	2021	Chase Freedom Flex	70000
Example Output:
card_name	issued_amount
Chase Sapphire Reserve	170000
Chase Freedom Flex	65000

(Sourced from JP Morgan Chase & Co.)

SELECT card_name,
       MIN(issued_amount) AS issued_amount
FROM monthly_cards_issued
GROUP BY 1
ORDER BY issued_amount DESC

35.
A phone call is considered an international call when the person calling is in a different country than the person receiving the call.

What percentage of phone calls are international? Round the result to 1 decimal.

Assumption:

The caller_id in phone_info table refers to both the caller and receiver.
phone_calls Table:
Column Name	Type
caller_id	integer
receiver_id	integer
call_time	timestamp
phone_calls Example Input:
caller_id	receiver_id	call_time
1	2	2022-07-04 10:13:49
1	5	2022-08-21 23:54:56
5	1	2022-05-13 17:24:06
5	6	2022-03-18 12:11:49
phone_info Table:
Column Name	Type
caller_id	integer
country_id	integer
network	integer
phone_number	string
phone_info Example Input:
caller_id	country_id	network	phone_number
1	US	Verizon	+1-212-897-1964
2	US	Verizon	+1-703-346-9529
3	US	Verizon	+1-650-828-4774
4	US	Verizon	+1-415-224-6663
5	IN	Vodafone	+91 7503-907302
6	IN	Vodafone	+91 2287-664895
Example Output:
international_calls_pct
50.0
Explanation
There is a total of 4 calls with 2 of them being international calls (from caller_id 1 => receiver_id 5, and caller_id 5 => receiver_id 1). Thus, 2/4 = 50.0%

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from Verizon)

WITH mycte AS
(
SELECT 
    pc.caller_id,
    pc.receiver_id,
    caller.country_id AS caller_country,
    receiver.country_id AS receiver_country
FROM phone_calls AS pc
JOIN phone_info AS caller
  ON pc.caller_id = caller.caller_id
JOIN phone_info AS receiver
  ON pc.receiver_id = receiver.caller_id
)

SELECT ROUND(SUM(CASE WHEN caller_country != receiver_country THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 1) AS international_calls_pct
FROM mycte

36.
UnitedHealth Group (UHG) has a program called Advocate4Me, which allows policy holders (or, members) to call an advocate and receive support for their health care needs – whether that's claims and benefits support, drug coverage, pre- and post-authorisation, medical records, emergency assistance, or member portal services.

Calls to the Advocate4Me call centre are classified into various categories, but some calls cannot be neatly categorised. These uncategorised calls are labeled as “n/a”, or are left empty when the support agent does not enter anything into the call category field.

Write a query to calculate the percentage of calls that cannot be categorised. Round your answer to 1 decimal place. For example, 45.0, 48.5, 57.7.

callers Table:
Column Name	Type
policy_holder_id	integer
case_id	varchar
call_category	varchar
call_date	timestamp
call_duration_secs	integer
callers Example Input:
policy_holder_id	case_id	call_category	call_date	call_duration_secs
1	f1d012f9-9d02-4966-a968-bf6c5bc9a9fe	emergency assistance	2023-04-13T19:16:53Z	144
1	41ce8fb6-1ddd-4f50-ac31-07bfcce6aaab	authorisation	2023-05-25T09:09:30Z	815
2	9b1af84b-eedb-4c21-9730-6f099cc2cc5e	n/a	2023-01-26T01:21:27Z	992
2	8471a3d4-6fc7-4bb2-9fc7-4583e3638a9e	emergency assistance	2023-03-09T10:58:54Z	128
2	38208fae-bad0-49bf-99aa-7842ba2e37bc	benefits	2023-06-05T07:35:43Z	619
Example Output:
uncategorised_call_pct
20.0
Explanation:
Out of the total of 5 calls registered, one call was not categorised. Therefore, the percentage of uncategorised calls is calculated as 20.0% (1 out of 5 multiplied by 100 and rounded to one decimal place).

The dataset you are querying against may have different input & output - this is just an example!

(Sourced from UnitedHealth)

SELECT ROUND(SUM(CASE WHEN call_category IS NULL OR call_category ILIKE 'n/a' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 1) AS uncategorised_call_pct
FROM callers

# Stratascratch continued . . .

28.
Find the customers with the highest daily total order cost between 2019-02-01 and 2019-05-01. If a customer had more than one order on a certain day, sum the order costs on a daily basis. Output each customer's first name, total cost of their items, and the date.

For simplicity, you can assume that every first name in the dataset is unique.

Mode: Medium
ID: 9915
Company: Shopify, Amazon

WITH mycte AS
(
SELECT c.first_name,
       o.order_date, 
       SUM(o.total_order_cost) AS max_cost
FROM customers AS c
INNER JOIN orders AS o
ON c.id = o.cust_id
GROUP BY 1, 2
HAVING o.order_date BETWEEN '2019-04-19' AND '2019-04-19'
)

SELECT *
FROM mycte
ORDER BY max_cost DESC
LIMIT 2

29.
Calculate the net change in the number of products launched by companies in 2020 compared to 2019. Your output should include the company names and the net difference.
(Net difference = Number of products launched in 2020 - The number launched in 2019.)

Mode: Medium
ID: 10318
Company: Tesla, Salesforce

WITH mycte1 AS
(SELECT company_name,
        COUNT(product_name) AS total_launch_20
FROM car_launches
WHERE year = 2020
GROUP BY 1),
mycte2 AS 
(SELECT company_name,
        COUNT(product_name) AS total_launch_19
FROM car_launches
WHERE year = 2019
GROUP BY 1)

SELECT mycte1.company_name,
       (total_launch_20 - total_launch_19) AS total_launch
FROM mycte1 
JOIN mycte2
ON mycte1.company_name = mycte2.company_name

30.
Identify returning active users by finding users who made a second purchase within 1 to 7 days after their first purchase. Ignore same-day purchases. Output a list of these user_ids.

Mode: Medium
ID: 10322
Company: Amazon

WITH mycte AS
(
SELECT user_id, 
       MIN(created_at) AS first_purchase
FROM amazon_transactions
GROUP BY 1
)

SELECT DISTINCT a.user_id
FROM mycte AS m
INNER JOIN amazon_transactions AS a
ON m.user_id = a.user_id
WHERE m.first_purchase <> a.created_at
  AND DATEDIFF(a.created_at, m.first_purchase) BETWEEN 1 AND 7;

31.
Calculate each user's average session time, where a session is defined as the time difference between a page_load and a page_exit. Assume each user has only one session per day. If there are multiple page_load or page_exit events on the same day, use only the latest page_load and the earliest page_exit, ensuring the page_load occurs before the page_exit. Output the user_id and their average session time.

Mode: Medium
ID: 10352
Company: Meta

WITH daily_loads AS (
    SELECT 
        user_id,
        DATE(timestamp) AS session_date,
        MAX(timestamp) AS latest_load
    FROM facebook_web_log
    WHERE action = 'page_load'
    GROUP BY user_id, DATE(timestamp)
),
daily_exits AS (
    SELECT 
        user_id,
        DATE(timestamp) AS session_date,
        MIN(timestamp) AS earliest_exit
    FROM facebook_web_log
    WHERE action = 'page_exit'
    GROUP BY user_id, DATE(timestamp)
),
valid_sessions AS (
    SELECT
        l.user_id,
        l.session_date,
        EXTRACT(EPOCH FROM (e.earliest_exit - l.latest_load)) AS session_duration
    FROM daily_loads l
    JOIN daily_exits e
      ON l.user_id = e.user_id
     AND l.session_date = e.session_date
    WHERE l.latest_load < e.earliest_exit
)
SELECT
    user_id,
    AVG(session_duration) AS avg_session_duration
FROM valid_sessions
GROUP BY user_id
ORDER BY user_id;

32.
Calculate the friend acceptance rate for each date when friend requests were sent. A request is sent if action = sent and accepted if action = accepted. If a request is not accepted, there is no record of it being accepted in the table. The output will only include dates where requests were sent and at least one of them was accepted, as the acceptance rate can only be calculated for those dates. Show the results ordered from the earliest to the latest date.

Mode: Medium
ID: 10285
Company: Meta

WITH sent_requests AS (
    SELECT user_id_sender, user_id_receiver, date AS sent_date
    FROM fb_friend_requests
    WHERE action = 'sent'
),
accepted_requests AS (
    SELECT user_id_sender, user_id_receiver, date AS accepted_date
    FROM fb_friend_requests
    WHERE action = 'accepted'
)
SELECT
    s.sent_date AS date,
    COUNT(a.user_id_receiver)::decimal / COUNT(s.user_id_receiver) AS percentage_acceptance
FROM sent_requests AS s
LEFT JOIN accepted_requests AS a
        ON s.user_id_sender = a.user_id_sender
        AND s.user_id_receiver = a.user_id_receiver
GROUP BY s.sent_date
HAVING COUNT(a.user_id_receiver) > 0
ORDER BY s.sent_date ASC;

33.
Find the second highest salary of employees.

Mode: Medium
ID: 9892
Company: Amazon, Dropbox

SELECT DISTINCT salary
FROM employee
ORDER BY salary DESC
LIMIT 1
OFFSET 1

OR

SELECT MAX(salary) AS salary
FROM employee
WHERE salary < (SELECT MAX(salary) FROM employee);

OR

SELECT salary
FROM (
    SELECT salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS rn
    FROM employee
) t
WHERE rn = 2;

34.
Find employees who are earning more than their managers. Output the employee's first name along with the corresponding salary.

Mode: Medium
ID: 9894
Company: Walmart, Dropbox, Best Buy

SELECT E.first_name,
       E.salary
FROM employee AS E
JOIN employee AS M
ON E.manager_id = M.id
WHERE E.salary > M.salary
ORDER BY E.salary DESC

35.
Find the employee with the highest salary per department.
Output the department name, employee's first name along with the corresponding salary.

Mode: Medium
ID: 9897
Company: Asana, Twitter

WITH temp AS 
(
SELECT RANK() OVER(PARTITION BY department ORDER BY salary DESC) AS ranking,
       department,
       first_name,
       salary
FROM employee
)

SELECT department,
       first_name,
       salary
FROM temp
WHERE ranking = 1

36.
Find the email activity rank for each user. Email activity rank is defined by the total number of emails sent. The user with the highest number of emails sent will have a rank of 1, and so on. Output the user, total emails, and their activity rank.


•	Order records first by the total emails in descending order.
•	Then, sort users with the same number of emails in alphabetical order by their username.
•	In your rankings, return a unique value (i.e., a unique rank) even if multiple users have the same number of emails.

Mode: Medium
ID: 10351
Company: Google

WITH mycte AS
(SELECT from_user AS user_id,
       COUNT(from_user) AS total_emails
FROM google_gmail_emails
GROUP BY user_id)

SELECT user_id,
       total_emails,
       ROW_NUMBER() OVER (ORDER BY total_emails DESC, user_id ASC) AS activity_rank
FROM mycte

37.
Find the Olympics with the highest number of unique athletes. The Olympics game is a combination of the year and the season, and is found in the games column. Output the Olympics along with the corresponding number of athletes. The id column uniquely identifies an athlete.

Mode: Medium
ID: 9942
Company: ESPN

SELECT games,
       COUNT(DISTINCT id) AS athletes_count
FROM olympics_athletes_events
GROUP BY 1
ORDER BY athletes_count DESC
LIMIT 1

38.
Identify the employee(s) working under manager manager_id=13 who have achieved the highest target. Return each such employee’s first name alongside the target value. The goal is to display the maximum target among all employees under manager_id=13 and show which employee(s) reached that top value.

Mode: Medium
ID: 9905
Company: Salesforce

WITH mycte AS
(
SELECT RANK() OVER(PARTITION BY department ORDER BY target DESC) AS ranking,
       id,
       first_name,
       last_name,
       salary,
       target,
       department,
       manager_id
FROM salesforce_employees
WHERE manager_id = 13
)

SELECT first_name,
       target
FROM mycte
WHERE ranking = 1

39.
Find the number of times each word appears in the contents column across all rows in the google_file_store dataset. Output two columns: word and occurrences.

Mode: Medium
ID: 9817
Company: Google

SELECT LOWER(regexp_split_to_table(regexp_replace(contents, '[^\w\s]', '', 'g'), '\s+')) AS word, 
       COUNT(*) AS occurrences
FROM google_file_store
GROUP BY 1
ORDER BY occurrences DESC

40.
Find the top 5 businesses with most reviews. Assume that each row has a unique business_id such that the total reviews for each business is listed on each row. Output the business name along with the total number of reviews and order your results by the total reviews in descending order.

Mode: Medium
ID: 10048
Company: Yelp

SELECT name,
       SUM(review_count) AS review_count
FROM yelp_business
GROUP BY 1
ORDER BY review_count DESC
LIMIT 5

41.
Calculate number of reviews for every business category. Output the category along with the total number of reviews. Order by total reviews in descending order.

Mode: Medium
ID: 10049
Company: Yelp

WITH mycte AS
  (SELECT unnest(string_to_array(categories, ';')) AS category,
          review_count
   FROM yelp_business)
   
SELECT category, 
       SUM(review_count) AS review_cnt
FROM mycte
GROUP BY 1
ORDER BY review_cnt DESC

42.
Find the review_text that received the highest number of  cool votes.
Output the business name along with the review text with the highest number of cool votes.

Mode: Medium
ID: 10060
Company: yelp_reviews

WITH mycte AS 
(SELECT business_name,
       review_text,
       SUM(cool)
FROM yelp_reviews
GROUP BY 1, 2
ORDER BY SUM(cool) DESC)

SELECT business_name,
       review_text
FROM mycte
LIMIT 2

43.
Find the average total compensation based on employee titles and gender. Total compensation is calculated by adding both the salary and bonus of each employee. However, not every employee receives a bonus so disregard employees without bonuses in your calculation. Employee can receive more than one bonus.
Output the employee title, gender (i.e., sex), along with the average total compensation.

Mode: Medium
ID: 10077
Company: City of San Francisco

SELECT e.employee_title,
       e.sex,
       AVG(e.salary + b.ttl_bonus) AS avg_compensation
FROM sf_employee e
INNER JOIN
  (SELECT worker_ref_id,
          SUM(bonus) AS ttl_bonus
   FROM sf_bonus
   GROUP BY worker_ref_id) b ON e.id = b.worker_ref_id
GROUP BY employee_title,
         sex

44.
Calculate the percentage of spam posts in all viewed posts by day. A post is considered a spam if a string "spam" is inside keywords of the post. Note that the facebook_posts table stores all posts posted by users. The facebook_post_views table is an action table denoting if a user has viewed a post.

Mode: Medium
ID: 10134
Company: Meta

SELECT fp.post_date, 
       ROUND(100.0 * SUM(CASE WHEN fp.post_keywords ILIKE '%spam%' THEN 1 ELSE 0 END) / COUNT(*), 0) AS spam_share
FROM facebook_posts AS fp
INNER JOIN facebook_post_views AS fpv
ON fp.post_id = fpv.post_id
GROUP BY 1
ORDER BY fp.post_date DESC

45.
Calculate the ratio of accounts closed on January 10th, 2020 using the fb_account_status table.

Mode: Medium
ID: 10296
Company: Meta

WITH mycte AS
(
SELECT status_date, 
       CASE WHEN status LIKE 'closed' THEN 1 ELSE 0 END AS closed1,
       CASE WHEN status LIKE 'open' THEN 1 ELSE 0 END AS opened1
FROM fb_account_status
WHERE status_date = '2020-01-10'
)

SELECT CAST(SUM(closed1) AS FLOAT) / NULLIF(SUM(closed1) + SUM(opened1), 0) AS closed_ratio
FROM mycte;

46.
Find matching hosts and guests pairs in a way that they are both of the same gender and nationality.
Output the host id and the guest id of matched pair.

Mode: Medium
ID: 10078
Company: Airbnb

SELECT ah.host_id,
       ag.guest_id
FROM airbnb_hosts AS ah
INNER JOIN airbnb_guests AS ag
ON ah.gender = ag.gender
AND ah.nationality = ag.nationality
GROUP BY 1, 2

47.
Find the percentage of shipable orders.
Consider an order is shipable if the customer's address is known.

Mode: Medium
ID: 10090
Company: Google, Amazon

SELECT 100.0 * SUM(CASE WHEN c.address IS NOT NULL THEN 1 ELSE 0 END) / COUNT(o.id) AS percent_shipable
FROM orders AS o
INNER JOIN customers AS c
ON o.cust_id = c.id

48.
Find the top 10 ranked songs in 2010. Output the rank, group name, and song name, but do not show the same song twice. Sort the result based on the rank in ascending order.

Mode: Medium
ID: 9650
Company: Spotify

SELECT year_rank, 
       group_name,
       song_name
FROM billboard_top_100_year_end
WHERE year = 2010
GROUP BY 1, 2, 3
LIMIT 10

49.
You are given a table named airbnb_host_searches that contains data for rental property searches made by users. Determine the minimum, average, and maximum rental prices for each popularity-rating bucket. A popularity-rating bucket should be assigned to every record based on its number_of_reviews (see rules below).

The host’s popularity rating is defined as below:
•   0 reviews: "New"
•   1 to 5 reviews: "Rising"
•   6 to 15 reviews: "Trending Up"
•   16 to 40 reviews: "Popular"
•   More than 40 reviews: "Hot"

Tip: The id column in the table refers to the search ID.

Output host popularity rating and their minimum, average and maximum rental prices. Order the solution by the minimum price.

Mode: Medium
ID: 9632
Company: Airbnb

SELECT CASE WHEN number_of_reviews = 0 THEN 'New'
            WHEN number_of_reviews BETWEEN 1 AND 5 THEN 'Rising'
            WHEN number_of_reviews BETWEEN 6 AND 15 THEN 'Trending Up'
            WHEN number_of_reviews BETWEEN 16 AND 40 THEN 'Popular'
            WHEN number_of_reviews > 40 THEN 'Hot'
       END AS host_popularity,
       MIN(price) AS min_price,
       AVG(price) AS avg_price,
       MAX(price) AS max_price
FROM airbnb_host_searches
GROUP BY 1
ORDER BY min_price ASC

50.
For each video, find how many unique users flagged it. A unique user can be identified using the combination of their first name and last name. Do not consider rows in which there is no flag ID.

Mode: Medium
ID: 2102
Company: Netflix, Google

WITH mycte AS 
(
SELECT CONCAT(user_firstname,' ', user_lastname) AS name,
       video_id,
       flag_id
FROM user_flags
WHERE flag_id IS NOT NULL
)

SELECT video_id,
       COUNT(DISTINCT name) AS num_unique_users
FROM mycte
GROUP BY 1
